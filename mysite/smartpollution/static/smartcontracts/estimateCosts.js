//This script return the contracts event data
//String(process.argv[2] is the location of the contract generated
var web3 = require('web3');
const fs = require("fs");
const solc = require('solc')

web3 = new web3(new web3.providers.HttpProvider("http://localhost:8545"));
//var abi =
//  '[ { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "changeLowerTrigger", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "metric", "outputs": [ { "name": "name", "type": "string", "value": "place_holder_metric_name_to_be_autogenerated" }, { "name": "value", "type": "int32", "value": "666" } ], "payable": false, "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "changeUpperTrigger", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "update", "outputs": [], "payable": false, "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_value", "type": "int32" } ], "name": "ValueChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_alarm", "type": "string" }, { "indexed": false, "name": "_value", "type": "int32" } ], "name": "Alarm", "type": "event" } ]';

var source = fs.readFileSync(String(process.argv[2]), 'utf8');
var compiledContract = solc.compile(source, 1);
var bytecode = compiledContract.bytecode;
var gasEstimate = web3.eth.estimateGas({data: bytecode});

console.log(String(gasEstimate))