//This script return the contracts event data
//arg2: is the contract abi
//arg3: is the contracts address
var web3 = require('web3');

web3 = new web3(new web3.providers.HttpProvider("http://localhost:8545"));
//web3.eth.defaultAccount = web3.eth.coinbase;
var abi_in = String(process.argv[2]).replace(/@StringDelimiter@/g, '"');

//var abi =
//  '[ { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "changeLowerTrigger", "outputs": [], "payable": false, "type": "function" }, { "constant": true, "inputs": [], "name": "metric", "outputs": [ { "name": "name", "type": "string", "value": "place_holder_metric_name_to_be_autogenerated" }, { "name": "value", "type": "int32", "value": "666" } ], "payable": false, "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "changeUpperTrigger", "outputs": [], "payable": false, "type": "function" }, { "constant": false, "inputs": [ { "name": "_value", "type": "int32" } ], "name": "update", "outputs": [], "payable": false, "type": "function" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_value", "type": "int32" } ], "name": "ValueChanged", "type": "event" }, { "anonymous": false, "inputs": [ { "indexed": false, "name": "_alarm", "type": "string" }, { "indexed": false, "name": "_value", "type": "int32" } ], "name": "Alarm", "type": "event" } ]';
var abiJSON = JSON.parse(abi_in);
var contAbi = web3.eth.contract(abiJSON);
var cont = contAbi.at(String(process.argv[3]));
var address=String(process.argv[3]);
var datas=[];
var eventFunctions = Object.keys(abiJSON).filter(elem => abiJSON[elem].type === 'event').map(elem => abiJSON[elem].name);

let callAllEvents = new Promise(function () {
    eventFunctions.forEach((funct, index) => {
      const cont = contAbi.at(address);
      const evsFil = cont[funct]({}, {
        fromBlock: 900000,
        toBlock: 'latest',
      });
      evsFil.get((error, result) => {
        try {
          const args = Object.keys(result)
            .map(elem => result[elem]);
          // This is the final output and from here it should be returned
          console.log("Event:"+funct+" ARGS:"+JSON.stringify(args));
        }
        catch (err) {
            console.log(" PROBLEM WITH THE BLOCKCHAIN CHECK PORT 8545 ");
        }
      });
    });
});